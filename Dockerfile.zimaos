# ZimaOS-optimized Docker build for Lectoria BookManager
# Includes PUID/PGID support for proper file permissions

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files for both backend and frontend
COPY package*.json ./
COPY frontend/package*.json ./frontend/

# Install backend dependencies with timeout and reduced concurrency
RUN npm ci --only=production --loglevel=error --prefer-offline --no-audit --maxsockets=1

# Install frontend dependencies separately with optimizations
WORKDIR /app/frontend
RUN npm ci --loglevel=error --prefer-offline --no-audit --maxsockets=1

# Copy source code
WORKDIR /app
COPY . .

# Build frontend with memory limit
WORKDIR /app/frontend
RUN NODE_OPTIONS="--max-old-space-size=1024" npm run build

# Go back to app directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p uploads data logs

# Production stage with PUID/PGID support
FROM node:18-alpine AS production

# Install required packages for user management and health checks
RUN apk add --no-cache \
    dumb-init \
    su-exec \
    shadow \
    wget

# Create default app user and group (will be modified by entrypoint)
RUN addgroup -g 1001 -S nodejs && \
    adduser -S lectoria -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production --loglevel=error --prefer-offline --no-audit && npm cache clean --force

# Copy application from builder
COPY --from=builder --chown=1001:1001 /app .

# Copy entrypoint script
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Create directories with default permissions (will be adjusted by entrypoint)
RUN mkdir -p uploads data logs frontend/build public && \
    chown -R 1001:1001 /app && \
    chmod -R 755 /app

# Expose port
EXPOSE 3000

# Health check with wget (compatible with entrypoint)
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Set entrypoint to handle PUID/PGID
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Default command
CMD ["dumb-init", "node", "backend_server.js"]